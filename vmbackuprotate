#!/bin/sh

#####################################
## Rotate virtual machines backups ##
#####################################

usage ()
{
  echo ''
  echo 'Usage : vmbackuprotate <config file path>'
  echo '    config file path: path to configuration file'
  echo ''
}

# If wrong number of arguments, print usage and exit
[ $# -ne 1 ] && { usage; exit 1; }

CONFIG_FILE=$1

# Parameters
# ----------

# Exit if cfget not installed
command -v cfget >/dev/null 2>&1 || { echo >&2 "vmbackuprotate needs cfget, which is not installed on the system. Aborting."; exit 2; }

# Exit if config file missing
test -f $CONFIG_FILE || { echo >&2 "Missing config file $CONFIG_FILE"; exit 3; }

# Directories

VM_DIR=`cfget -C $CONFIG_FILE vm_dir 2>/dev/null` || { echo >&2 "Missing parameter vm_dir in $CONFIG_FILE"; exit 3; }
BAK_DIR=`cfget -C $CONFIG_FILE bak_dir 2>/dev/null` || { echo >&2 "Missing parameter bak_dir in $CONFIG_FILE"; exit 3; }

# Day of the week for weekly backup (1 is monday, 7 is sunday)
WEEKLY_DAY_OF_WEEK=`cfget -C $CONFIG_FILE weekly_day_of_week` 2>/dev/null || WEEKLY_DAY_OF_WEEK=7

# Keep backups for N days
DAILY_BACKUPS_LIFETIME=`cfget -C $CONFIG_FILE daily_backups_lifetime 2>/dev/null` || DAILY_BACKUPS_LIFETIME=7
WEEKLY_BACKUPS_LIFETIME=`cfget -C $CONFIG_FILE weekly_backups_lifetime 2>/dev/null` || WEEKLY_BACKUPS_LIFETIME=30

# Names of VM to backup
# (if not found in config file, no VM to backup)
VM_NAMES=`cfget -C $CONFIG_FILE vm_names 2>/dev/null`

# Remote directories to synchronize
# (if not found in config file, no remote dir to synchronize)
REMOTE_DIRS=`cfget -C $CONFIG_FILE remote_dirs 2>/dev/null`

# Script
# ------

# Create backup dirs if they don't exist

DAILY_DIR=$BAK_DIR/daily
WEEKLY_DIR=$BAK_DIR/weekly

mkdir -p $DAILY_DIR && mkdir -p $WEEKLY_DIR || { echo >&2 "Error creating backup directories. Aborting."; exit 4; }

# Make backups

for vm in $VM_NAMES

do

    echo "Backup $vm..."

    BAK_FILENAME="$vm"_`date +%y%m%d`.qcow2
    BAK_FILEPATH=$BAK_DIR/$BAK_FILENAME
    vmbackup $VM_DIR $vm $BAK_FILEPATH || { echo >&2 "Backup failed for $vm "; continue; }

    # Move backup to daily directory

    mv $BAK_FILEPATH $DAILY_DIR

    # If today is weekly backup, hard link to "weekly" directory

    if [ `date +%u` -eq $WEEKLY_DAY_OF_WEEK ]
    then
        ln $DAILY_DIR/$BAK_FILENAME $WEEKLY_DIR
    fi

done

# Get rid of old backups

find $DAILY_DIR -mtime +$DAILY_BACKUPS_LIFETIME  -delete
find $WEEKLY_DIR -mtime +$WEEKLY_BACKUPS_LIFETIME  -delete

# Synchronize remote directories
for remote in $REMOTE_DIRS

do

    echo "Synchronize $remote..."

    # A 'vmbackup' directory is created in each remote dir
    # Hardcoding a subdirectory name is not elegant, but it is a simple measure to avoid wreaking havoc
    # in the system if entering / as remote dir by mistake in the config file.
    rsync -a -H --delete --progress $BAK_DIR/ $remote/vmbackup || { echo >&2 "Synchronization failed for $remote"; continue; }

done

exit 0
